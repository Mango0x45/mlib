#!/usr/bin/python3

import math

from lib import *


longest = 0

def parse(file: str) -> list[bool]:
	global longest

	xs = ['0'] * 0x110000
	with open(file, 'r') as f:
		for line in f.readlines():
			if len(line.strip()) == 0 or line[0] == '#':
				continue

			parts = line.split(';')
			if parts[1].strip() not in {'C', 'S'}:
				continue
			ranges = [int(x, 16) for x in parts[0].strip().split('..')]
			prop = f'RUNE_C(0x{parts[2].split('#')[0].strip()})'
			longest = max(longest, len(prop))

			for i in range(ranges[0], ranges[len(ranges) - 1] + 1):
				xs[i] = prop
	return xs

def genfile(cs: list[tuple[bool, ...]], blksize: int) -> None:
	Cs = cs
	cs = list(dict.fromkeys(Cs))

	print('''\
/* This file is autogenerated by gen/prop/scf; DO NOT EDIT. */

#include <stdint.h>

#include "rune.h"
#include "unicode/prop.h"
''')

	print(f'static constexpr {typename(len(cs) - 1)} stage1[] = {{')
	for i, c in enumerate(Cs):
		print(f'%c%{len(str(len(cs) - 1))}d,' % ('\t' if i % 16 == 0 else ' ', cs.index(c)), end='')
		if i % 16 == 15:
			print()
	print('};')

	print()

	ppc = columns(blksize, longest + 1)
	print(f'static constexpr rune stage2[][{blksize}] = {{')
	for c in cs:
		for i in range(blksize // ppc):
			print('\t{' if i == 0 else '\t ', end='')
			for j in range(ppc):
				print(c[i*ppc + j], end='')
				if i < blksize // ppc - 1 or j < ppc - 1:
					print(',', end='')
				if j < ppc - 1:
					print(' ' * (longest + 1 - len(c[i*ppc + j])), end='')
			if i < blksize // ppc - 1:
				print()
		print('},')
	print('};')

	print()

	print(f'''\
rune
uprop_get_scf(rune ch, bool az_tr)
{{
	if (az_tr) {{
		if (ch == 'I')
			return U'ı';
		if (ch == U'İ')
			return 'i';
	}}
	rune hc = stage2[stage1[ch / {blksize}]][ch % {blksize}];
	return hc == 0 ? ch : hc;
}}''')

def main() -> None:
	cwd_init()
	xs = parse('data/CaseFolding')

	blksize = -1
	smallest = math.inf

	for bs in powers_of_2():
		if bs > len(xs):
			break
		Cs = [tuple(x) for x in chunks(xs, bs)]
		cs = set(Cs)

		sz_s1 = len(Cs) * isize(len(cs) - 1)
		sz_s2 = len(cs) * bs * 4
		sz = sz_s1 + sz_s2

		if sz < smallest:
			smallest = sz
			blksize = bs

	Cs = [tuple(x) for x in chunks(xs, blksize)]
	with open('lib/unicode/prop/uprop_get_scf.c', 'w') as f:
		sys.stdout = f
		genfile(Cs, blksize)

	report_size(len(xs), smallest)

if __name__ == '__main__':
	main()
