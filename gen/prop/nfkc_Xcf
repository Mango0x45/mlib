#!/bin/sh

set -e
cd "${0%/*}/../.."

for x in cf scf
do
	gawk -v s=$x '
	BEGIN {
		FS = "( *; *| *#.*)"

		print "/* This file is autogenerated by gen/prop/nfkc_Xcf; DO NOT EDIT. */"
		print ""
		print "#include \"_bsearch.h\""
		print "#include \"macros.h\""
		print "#include \"rune.h\""
		print "#include \"unicode/prop.h\""
		print ""
		print "#define M(...) ((struct rview)_(__VA_ARGS__))"
		print "#define _(...) \\"
		print "\t{(const rune []){__VA_ARGS__}, lengthof(((const rune []){__VA_ARGS__}))}"
		print ""
		print "static const struct {"
		print "\trune lo, hi;"
		print "\tstruct rview val;"
		print "} lookup[] = {"
	}

	$2 == "NFKC_" toupper(s) {
		n = split($1, xs, /\.\./)
		lo = strtonum("0X" xs[1])
		hi = strtonum("0X" xs[n])

		for (i = lo; i <= hi; i++)
			props[i] = $3 ? $3 : "-"
	}

	END {
		for (i = 0; i <= 0x10FFFD; i++) {
			if (!props[i])
				continue
			for (lo = i; props[lo] == props[i + 1]; i++)
				;
			printf "\t{RUNE_C(0x%06X), RUNE_C(0x%06X), _(", lo, i
			n = split(props[i] == "-" ? "" : props[i], xs, / /)
			for (j = 1; j <= n; j++) {
				printf "RUNE_C(0x%s)", xs[j]
				if (j < n)
					printf ", "
			}
			print ")},"
		}

		print "};"
		print ""
		print "_MLIB_DEFINE_BSEARCH(struct rview, lookup, M(ch))"
		print ""
		print "struct rview"
		print "uprop_get_nfkc_" s "(rune ch)"
		print "{"
		print "\treturn ch < lookup[0].lo ? M(ch) : mlib_lookup(ch);"
		print "}"
	}
	' data/DerivedNormalizationProps >lib/unicode/prop/uprop_get_nfkc_${x}.c
done
