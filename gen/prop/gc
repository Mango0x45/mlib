#!/usr/bin/python3

import math

from lib import *


def parse(file: str) -> list[bool]:
	xs = ['GC_CN'] * 0x110000
	with open(file, 'r') as f:
		for line in f.readlines():
			parts = line.split(';')
			parts[0] = int(parts[0], 16)
			if 'First' in parts[1]:
				lo = parts[0]
			elif 'Last' in parts[1]:
				hi = parts[0]
				for i in range(lo, hi + 1):
					xs[i] = f'GC_{parts[2].upper()}'
			else:
				xs[parts[0]] = f'GC_{parts[2].upper()}'
	return xs

def genfile(cs: list[tuple[bool, ...]], blksize: int) -> None:
	Cs = cs
	cs = list(dict.fromkeys(Cs))

	print('''\
/* This file is autogenerated by gen/prop/gc; DO NOT EDIT. */

#include "unicode/prop.h"
''')

	print(f'static constexpr {typename(len(cs) - 1)} stage1[] = {{')
	for i, c in enumerate(Cs):
		print(f'%c%{len(str(len(cs) - 1))}d,' % ('\t' if i % 16 == 0 else ' ', cs.index(c)), end='')
		if i % 16 == 15:
			print()
	print('};')

	print()

	ppc = columns(blksize, 6)
	print(f'static constexpr enum uprop_gc stage2[][{blksize}] = {{')
	for c in cs:
		for i in range(blksize // ppc):
			print('\t{' if i == 0 else '\t ', end='')
			for j in range(ppc):
				print(c[i*ppc + j], end='')
				if i < blksize // ppc - 1 or j < ppc - 1:
					print(',', end='')
				if j < ppc - 1:
					print(' ', end='')
			if i < blksize // ppc - 1:
				print()
		print('},')
	print('};')

	print()

	print(f'''\
enum uprop_gc
uprop_get_gc(rune ch)
{{
	return stage2[stage1[ch / {blksize}]][ch % {blksize}];
}}''')

def main() -> None:
	cwd_init()
	sys.stdout = open('lib/unicode/prop/uprop_get_gc.c', 'w')
	xs = parse('data/UnicodeData')

	blksize = -1
	smallest = math.inf

	for bs in powers_of_2():
		if bs > len(xs):
			break
		Cs = [tuple(x) for x in chunks(xs, bs)]
		cs = list(dict.fromkeys(Cs))

		sz_s1 = len(Cs) * isize(len(cs) - 1)
		sz_s2 = len(cs) * bs * 4
		sz = sz_s1 + sz_s2

		if sz < smallest:
			smallest = sz
			blksize = bs

	Cs = [tuple(x) for x in chunks(xs, blksize)]
	genfile(Cs, blksize)

if __name__ == '__main__':
	main()
