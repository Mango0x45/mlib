#!/usr/bin/python3

import math
import sys

from lib import *


def parse(file: str) -> list[bool]:
	xs = [False] * 0x110000
	if sys.argv[1] == 'Indic_Conjunct_Break':
		sys.argv[1] = 'InCB;'
	with open(file, 'r') as f:
		for line in f.readlines():
			if (
				len(line) == 0
				or line[0] == '#'
				or sys.argv[1] not in line
			):
				continue
			parts = [int(x, 16) for x in line.split(';')[0].strip().split('..')]
			for i in range(parts[0], parts[len(parts) - 1] + 1):
				xs[i] = True
	return xs

def genfile(cs: list[tuple[bool, ...]], blksize: int) -> None:
	Cs = cs
	cs = list(dict.fromkeys(Cs))

	print('''\
/* This file is autogenerated by gen/prop/bool-props; DO NOT EDIT. */

#include "bitset.h"
#include "unicode/prop.h"
''')

	print(f'static constexpr {typename(len(cs) - 1)} stage1[] = {{')
	for i, c in enumerate(Cs):
		print(f'%c%{len(str(len(cs) - 1))}d,' % ('\t' if i % 16 == 0 else ' ', cs.index(c)), end='')
		if i % 16 == 15:
			print()
	print('};')

	print()

	bcnt = blksize // 8
	bpc = columns(bcnt)
	print(f'static constexpr unsigned char stage2[][{bcnt}] = {{')
	for c in cs:
		x = sum(map(lambda x: x[1] << x[0], enumerate(c)))

		for i in range(bcnt // bpc):
			print('\t{' if i == 0 else '\t ', end='')
			for j in range(bpc):
				print('0x%02X' % (x & 0xFF), end='')
				x >>= 8
				if i < bcnt // bpc - 1 or j < bpc - 1:
					print(',', end='')
				if j < bpc - 1:
					print(' ', end='')
			if i < bcnt // bpc - 1:
				print()
		print('},')
	print('};')

	print()

	print(f'''\
bool
uprop_is_{sys.argv[2]}(rune ch)
{{
	return TESTBIT(stage2[stage1[ch / {blksize}]], ch % {blksize});
}}''')

def main() -> None:
	if len(sys.argv) != 4:
		print('Usage: bool-props.py name shortname file', file=sys.stderr)
		exit(1)

	xs = parse(sys.argv[3])

	blksize = -1
	smallest = math.inf

	for bs in powers_of_2():
		if bs > len(xs):
			break
		Cs = [tuple(x) for x in chunks(xs, bs)]
		cs = list(dict.fromkeys(Cs))

		sz_s1 = len(Cs) * isize(len(cs) - 1)
		sz_s2 = len(cs) * bs
		sz = sz_s1 + sz_s2

		if sz < smallest:
			smallest = sz
			blksize = bs

	Cs = [tuple(x) for x in chunks(xs, blksize)]
	genfile(Cs, blksize)

if __name__ == '__main__':
	main()
